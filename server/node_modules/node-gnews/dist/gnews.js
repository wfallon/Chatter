"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const cheerio = require("cheerio");
const html_entities_1 = require("html-entities");
const lodash_1 = require("lodash");
const xml2js = require("xml2js");
const parseXml = (xml) => {
    return new Promise((resolve, reject) => {
        xml2js.parseString(xml, (err, result) => {
            if (err) {
                return reject(err);
            }
            return resolve(result);
        });
    });
};
const flattenArticles = (article) => Object.entries(article).reduce((previous, [key, value]) => {
    if (key === 'guid') {
        return previous;
    }
    return Object.assign({}, previous, {
        [key]: value[0]
    });
}, {});
const entities = new html_entities_1.AllHtmlEntities();
const formatArticle = (article) => {
    const description = article.description;
    const decodedDescription = entities.decode(description);
    const $ = cheerio.load(description);
    const thumbnailUrl = lodash_1.get(article, '[media:content]["$"]["url"]', null);
    const publisher = entities.decode($('font').html() || '');
    const fullCoverage = $('ol > li > strong > a').attr('href');
    const related = [];
    $('ol > li').each((index, element) => {
        const title = $(element)
            .find('a')
            .text();
        const link = $(element)
            .find('a')
            .attr('href');
        const relatedPublisher = $(element)
            .find('font')
            .text();
        related.push({
            title,
            link,
            publisher: relatedPublisher
        });
    });
    // Add publisher, re-formatted description, and url
    const formattedArticle = Object.assign(article, {
        description: decodedDescription,
        publisher,
        fullCoverage,
        related
    });
    // omit imgSrc if empty
    return thumbnailUrl
        ? Object.assign(formattedArticle, { thumbnailUrl })
        : formattedArticle;
};
class Gnews {
    constructor(defaultParams = {
            gl: 'US',
            ned: 'us',
            hl: 'en'
        }) {
        this.base = 'https://news.google.com/news/rss';
        this.defaultParams = defaultParams;
    }
    headlines(topic, extraParams = {}) {
        let url;
        if (topic) {
            url = `${this.base}/headlines/section/topic/${topic}`;
        }
        else {
            url = this.base;
        }
        return this.request(url, extraParams);
    }
    search(q, extraParams = {}) {
        const url = `${this.base}/search/section/q/${q}/${q}`;
        return this.request(url, extraParams);
    }
    request(url, extraParams = {}) {
        return axios_1.default
            .get(url, {
            responseType: 'xml',
            params: Object.assign({}, this.defaultParams, extraParams)
        })
            .then(response => response.data)
            .then(xml => parseXml(xml)) // parse XML
            .then((obj) => obj.rss.channel[0].item) // retrieve articles
            .then(articles => (!!articles ? articles : []))
            .then(articles => articles.map(flattenArticles)) // flatten articles and omit guid
            .then(articles => articles.map(formatArticle)); // format articles
    }
}
exports.Gnews = Gnews;
